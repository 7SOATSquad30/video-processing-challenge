name: Tests

on:
  pull_request:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: us-east-1

jobs:
  tests-lambda-video-processing:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Instalar dependências do Python
        run: |
          python -m pip install --upgrade pip
          pip install -r src/lambda-video-processing/app/requirements.txt
          pip install pytest pytest-cov moto  # Instala o pytest, pytest-cov e moto

      - name: Configurar região da AWS
        run: |
          echo "AWS_DEFAULT_REGION=us-east-1" >> $GITHUB_ENV

      - name: Rodar testes unitários com coverage
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/src/lambda-video-processing/app"
          cd src/lambda-video-processing/app/
          pytest tests/ -v --cov=./ --cov-report=term --cov-config=.coveragerc

      - name: Calcular e exibir porcentagem de cobertura
        run: |
          export PYTHONPATH="${PYTHONPATH}:$(pwd)/src/lambda-video-processing/app"
          cd src/lambda-video-processing/app/
          coverage report
          echo "Porcentagem de cobertura: $(coverage report | grep TOTAL | awk '{print $4}')"

      - name: Verificar cobertura mínima (80%)
        run: |
          cd src/lambda-video-processing/app/
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "Cobertura insuficiente: $COVERAGE% (mínimo 80%)"
            exit 1
          else
            echo "Cobertura suficiente: $COVERAGE%"
          fi

  tests-lambda-status-video-processing:
        name: test
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3

            - name: Cache Node.js modules
              uses: actions/cache@v3
              with:
                    path: ~/.npm
                    key: ${{ runner.os }}-node-22.x-${{ hashFiles('**/package-lock.json') }}
                    restore-keys: |
                      ${{ runner.os }}-node-22.x-

            - name: Use Node.js 22.x
              uses: actions/setup-node@v3
              with:
                  node-version: 22.x

            - name: Install dependencies
              working-directory: ./src/lambda-status-video-processing
              run: npm ci --save-dev

            - name: Unit tests
              working-directory: ./src/lambda-status-video-processing
              run: npm run test

            - name: Check Jest coverage threshold
              working-directory: ./src/lambda-status-video-processing
              run: |
                COVERAGE=$(cat ./coverage/lcov-report/index.html | grep -oP 'All files.*?(\d+\.\d+)%' | sed 's/[^0-9.]//g')
                echo "Coverage: $COVERAGE"
                if (( $(echo "$COVERAGE < 80" | bc -l) )); then
                  echo "Coverage is below 80%! Fail the build.";
                  exit 1;
                fi

  test-infra:
    runs-on: ubuntu-latest
    needs: [tests-lambda-video-processing, tests-lambda-status-video-processing]

    steps:
      - name: Checkout do repositório
        uses: actions/checkout@v4

      - name: Configurar credenciais AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Instalar dependências necessárias
        run: sudo apt-get update && sudo apt-get install -y xz-utils zip

      - name: Instalar Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Cache do Terraform
        uses: actions/cache@v3
        with:
          path: ~/.terraform.d
          key: terraform-${{ runner.os }}-${{ hashFiles('src/infra/**/*.tf') }}
          restore-keys: terraform-${{ runner.os }}-

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.17.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Raise infra
        run: make infrastructure/up

      - name: Build
        run: make build/with-docker

      - name: Deploy to localstack
        run: make deploy/dev/with-docker